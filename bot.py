import logging
import re
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================== –ö–û–ù–°–¢–ê–ù–¢–´ ==================
ADMIN_CHAT_ID = 1822874836  # —á–∏—Å–ª–æ, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
BOT_TOKEN = "8482024659:AAEKPoPYm96dI6DkQTxU6pFanzZKZ7Y9Gvg"

DISCOUNT_PERCENT = 10  # —Å–∫–∏–¥–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
SELECTING_SERVICE, AWAITING_PRICE_CHOICE, AWAITING_PAY_CHOICE, \
ENTERING_BIRTHDATE, ENTERING_QUESTION, ENTERING_SITUATION, \
UPLOAD_PAYMENT, CONTACT_PREF = range(8)

# –ö–Ω–æ–ø–∫–∏ —à–∞–≥–æ–≤
BTN_PRICE = "üíé –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
BTN_PAY = "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"
BTN_BACK = "–ù–∞–∑–∞–¥"

# –û—Ü–µ–Ω–∫–∏
RATINGS = ["üíú 1", "üíú 2", "üíú 3", "üíú 4", "üíú 5"]

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_DETAILS = """
üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*

üåô *–ì—Ä–∏–≤–Ω–µ–≤–∞—è –∫–∞—Ä—Ç–∞:* 
`4441 1111 4397 8900`

üí´ *–ï–≤—Ä–æ –∫–∞—Ä—Ç–∞:*
`5313 7700 4628 8378`

‚ú® *PayPal:* 
`@larakiri`

üîÆ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞!*
"""

# ================== –£–°–õ–£–ì–ò: –Ω–∞–∑–≤–∞–Ω–∏—è, —Ü–µ–Ω—ã, ¬´–º–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏¬ª ==================
SERVICES = {
    "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": {
        "price_uah": 500, "price_eur": 10,
        "intro": "–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —ç—Ç–æ—Ç –º–∏—Ä –Ω–µ —Å–ª—É—á–∞–π–Ω–æ. –î—É—à–∞ –Ω–µ—Å—ë—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–∫—Ä—ã—Ç—É—é –æ—Ç –≥–ª–∞–∑, –Ω–æ –æ—â—É—â–∞–µ–º—É—é —Å–µ—Ä–¥—Ü–µ–º.",
        "gain": [
            "–∫–∞—Ä—Ç—É –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ä–æ–≤ –∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤",
            "–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∑–∞—á–µ–º –≤—ã –∑–¥–µ—Å—å –∏ –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è",
            "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
            "—á—É–≤—Å—Ç–≤–æ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–≤–æ—ë–º –ø—É—Ç–∏",
        ],
        "how": "–í—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* ‚Äî –∏ —è –æ—Ç–∫—Ä—ã–≤–∞—é –≥–ª—É–±–∏–Ω–Ω—ã–π –ø–ª–∞—Å—Ç –≤–∞—à–µ–π —Å—É–¥—å–±—ã.",
        "requires": ["birthdate"],  # —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å
        "ask_birthdate": "üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–î–î.–ú–ú.–ì–ì–ì–ì)"
    },
    "–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ": {
        "price_uah": 500, "price_eur": 10,
        "intro": "–ö–æ–≥–¥–∞ —Ä–∞–∑—É–º –∑–∞–ø—É—Ç–∞–Ω, –¢–∞—Ä–æ –≥–æ–≤–æ—Ä–∏—Ç —è–∑—ã–∫–æ–º –æ–±—Ä–∞–∑–æ–≤. –ö–∞—Ä—Ç—ã –≤–∏–¥—è—Ç –±–æ–ª—å—à–µ, —á–µ–º –º—ã, –∏ –º—è–≥–∫–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, –∫—É–¥–∞ —à–∞–≥–Ω—É—Ç—å.",
        "gain": [
            "–ø—Ä–æ—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å",
            "–æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
            "–ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∫—Ä—ã—Ç—ã—Ö –≤–ª–∏—è–Ω–∏–π",
            "—Å–æ–≤–µ—Ç, –∫–∞–∫ –ª—É—á—à–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å",
        ],
        "how": "–í—ã –ø–∏—à–µ—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* –∏ *–≤–æ–ø—Ä–æ—Å* ‚Äî –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –∑–µ—Ä–∫–∞–ª–æ –≤–∞—à–µ–π –¥—É—à–∏.",
        "requires": ["birthdate", "question"],
        "ask_birthdate": "üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–î–î.–ú–ú.–ì–ì–ì–ì)",
        "ask_question": "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–≤–∞—à –≤–æ–ø—Ä–æ—Å*"
    },
    "–í—Å–µ –æ–±–æ –º–Ω–µ": {
        "price_uah": 2500, "price_eur": 50,
        "intro": "–≠—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –≥–ª—É–±—å —Å–µ–±—è ‚Äî –≥–¥–µ –∑–≤—ë–∑–¥—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ –≤–∞—à–µ–π –ø—Ä–∏—Ä–æ–¥–µ –∏ —Ä–æ–ª–∏ –≤ —Ç–∞–Ω—Ü–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
        "gain": [
            "–ø–æ–ª–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–æ—Å—å–µ",
            "–∞–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–∂–Ω—ã—Ö –º–µ—Å—Ç",
            "–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤",
            "—è—Å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≥–¥–µ –¥–µ–Ω—å–≥–∏, –ª—é–±–æ–≤—å, –º–∏—Å—Å–∏—è",
        ],
        "how": "–í—ã –ø–∏—à–µ—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è*, –∏ —è —Å–æ–±–∏—Ä–∞—é —Ü–µ–ª–æ—Å—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.",
        "requires": ["birthdate"],
        "ask_birthdate": "üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–î–î.–ú–ú.–ì–ì–ì–ì)"
    },
    "–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å": {
        "price_uah": 1000, "price_eur": 20,
        "intro": "–ï—Å—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–µ–Ω —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç? –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç –∑–Ω–∞–∫ ‚Äî –Ω—É–∂–Ω–æ –ª–∏—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
        "gain": [
            "–∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω",
            "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π",
            "—Å–æ–≤–µ—Ç—ã, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ",
            "–ø–æ–¥–¥–µ—Ä–∂–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—ë—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        ],
        "how": "–í—ã *–æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≤–æ–ø—Ä–æ—Å* ‚Äî —è —Å—á–∏—Ç—ã–≤–∞—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –∏ –¥–∞—é —è—Å–Ω–æ—Å—Ç—å.",
        "requires": ["situation"],
        "ask_situation": "‚úçÔ∏è *–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å*"
    },
    "–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –∞–Ω–≥–µ–ª–∞": {
        "price_uah": 200, "price_eur": 5,
        "intro": "–ò–Ω–æ–≥–¥–∞ –î—É—à–µ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –æ–Ω–∞ –Ω–µ –æ–¥–Ω–∞. –ê–Ω–≥–µ–ª—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.",
        "gain": [
            "—Å–≤–µ—Ç–ª–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—ã—Å—à–∏—Ö —Å–∏–ª",
            "—Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥—É—Ç –ø—Ä—è–º–æ –≤ —Å–µ—Ä–¥—Ü–µ",
            "–Ω–µ–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–π —Å–∏–ª–µ",
            "–æ—â—É—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ç–µ–ø–ª–∞",
        ],
        "how": "–í—ã –ø–∏—à–µ—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* –∏ *–≤–æ–ø—Ä–æ—Å*, –∏ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ —è –ø–µ—Ä–µ–¥–∞—é —Å–ª–æ–≤–∞ –∞–Ω–≥–µ–ª—å—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏.",
        "requires": ["birthdate", "question"],
        "ask_birthdate": "üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–î–î.–ú–ú.–ì–ì–ì–ì)",
        "ask_question": "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–≤–∞—à –≤–æ–ø—Ä–æ—Å*"
    }
}

# ================== –§–ê–ô–õ-–õ–û–ì ==================
def append_log(filepath: str, block: str) -> None:
    try:
        with open(filepath, "a", encoding="utf-8") as f:
            f.write(f"üì© {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n{block}\n" + "‚îÄ"*50 + "\n\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filepath}: {e}")

# ================== –ê–î–ú–ò–ù: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–ª–µ–π ==================
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, text: str, reply_to_message_id: Optional[int] = None):
    try:
        m = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode='Markdown', reply_to_message_id=reply_to_message_id)
        # –ª–æ–≥
        append_log("all_orders.txt", text)
        return m
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")
        append_log("all_orders.txt", text)

async def forward_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    user = update.message.from_user
    msg = update.message
    username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
    message_text = msg.text if msg.text else "üìé –≤–ª–æ–∂–µ–Ω–∏–µ/–º–µ–¥–∏–∞"

    card_text = (
        "üë§ *–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª:*\n"
        f"*–ò–º—è:* {user.first_name} {user.last_name or ''}\n"
        f"*Username:* {username}\n"
        f"*ID:* {user.id}\n"
        f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {message_text}\n"
        f"*–í—Ä–µ–º—è:* {datetime.now().strftime('%H:%M:%S')}"
    )
    relay: Dict[int, Dict[str, Any]] = context.bot_data.setdefault("relay", {})

    if msg.text:
        admin_msg = await notify_admin(context, card_text)
        if admin_msg:
            relay[admin_msg.message_id] = {"user_chat_id": msg.chat_id, "user_message_id": msg.message_id}
    else:
        try:
            copy_msg = await context.bot.copy_message(chat_id=ADMIN_CHAT_ID, from_chat_id=msg.chat_id, message_id=msg.message_id)
            relay[copy_msg.message_id] = {"user_chat_id": msg.chat_id, "user_message_id": msg.message_id}
            admin_info = await notify_admin(context, card_text, reply_to_message_id=copy_msg.message_id)
            if admin_info:
                relay[admin_info.message_id] = {"user_chat_id": msg.chat_id, "user_message_id": msg.message_id}
        except Exception as e:
            print(f"‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω—É –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            admin_msg = await notify_admin(context, card_text)
            if admin_msg:
                relay[admin_msg.message_id] = {"user_chat_id": msg.chat_id, "user_message_id": msg.message_id}

# ================== –û–¢–í–ï–¢ –ê–î–ú–ò–ù–ê REPLY'–ï–ú + –ø—Ä–æ—Å—å–±–∞ –æ–± –æ—Ü–µ–Ω–∫–µ ==================
def rating_keyboard():
    return ReplyKeyboardMarkup([RATINGS, [BTN_BACK]], resize_keyboard=True)

async def ask_for_rating(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    txt = (
        "üíú –ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç:\n"
        "–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç *1* –¥–æ *5*.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî —ç—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ üå∏"
    )
    await context.bot.send_message(chat_id=user_id, text=txt, parse_mode='Markdown', reply_markup=rating_keyboard())
    # –ø–æ–º–µ—Ç–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (10 –º–∏–Ω—É—Ç)
    awaiting: Dict[int, datetime] = context.bot_data.setdefault("await_rating", {})
    awaiting[user_id] = datetime.now() + timedelta(minutes=10)

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    msg = update.message
    if not msg or not msg.reply_to_message:
        return
    relay: Dict[int, Dict[str, Any]] = context.bot_data.get("relay", {})
    mapping = relay.get(msg.reply_to_message.message_id)
    target_chat_id = mapping["user_chat_id"] if mapping else None
    if not target_chat_id:
        replied_text = msg.reply_to_message.text or ""
        m = re.search(r'ID[:\s]*([0-9]+)', replied_text)
        if m:
            target_chat_id = int(m.group(1))
    if not target_chat_id:
        await msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É/–∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")
        return
    if msg.text:
        await context.bot.send_message(chat_id=target_chat_id, text=msg.text)
    else:
        await context.bot.copy_message(chat_id=target_chat_id, from_chat_id=ADMIN_CHAT_ID, message_id=msg.message_id)
    await msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")
    # –ø–æ–ø—Ä–æ—Å–∏–º –æ—Ü–µ–Ω–∫—É
    await ask_for_rating(context, target_chat_id)

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def services_keyboard():
    rows = [
        ["–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ"],
        ["–í—Å–µ –æ–±–æ –º–Ω–µ", "–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å"],
        ["–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –∞–Ω–≥–µ–ª–∞"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def choice_price_keyboard():
    return ReplyKeyboardMarkup([[BTN_PRICE], [BTN_BACK]], resize_keyboard=True)

def choice_pay_keyboard():
    return ReplyKeyboardMarkup([[BTN_PAY], [BTN_BACK]], resize_keyboard=True)

def back_keyboard():
    return ReplyKeyboardMarkup([[BTN_BACK]], resize_keyboard=True)

# ================== –¢–ï–ö–°–¢–´ ==================
def render_service_card(name: str) -> str:
    s = SERVICES[name]
    gain_list = "\n".join([f"‚Ä¢ {item}" for item in s["gain"]])
    text = (
        f"‚ú® *{name}*\n\n"
        f"{s['intro']}\n\n"
        f"**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n{gain_list}\n\n"
        f"üåô **–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç:**\n{s['how']}\n\n"
        f"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ ¬´{BTN_PRICE}¬ª."
    )
    return text

# ================== –•–ï–õ–ü–ï–†–´ ==================
def is_valid_date(date_string: str) -> bool:
    try:
        datetime.strptime(date_string, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def get_discounted(price: int) -> int:
    return max(0, round(price * (100 - DISCOUNT_PERCENT) / 100))

# ================== –ó–ê–ö–ê–ó –ê–î–ú–ò–ù–£ ==================
async def forward_order_to_admin(context: ContextTypes.DEFAULT_TYPE, user_data: dict, user, service: str):
    try:
        order_text = (
            "üåü *–ù–û–í–´–ô –ó–ê–ö–ê–ó* üåü\n\n"
            f"üìÖ *–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÆ *–£—Å–ª—É–≥–∞:* {service}\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {user.first_name}\n"
            f"üì± *Username:* @{user.username or '–Ω–µ—Ç'}\n"
            f"üÜî *ID:* {user.id}\n"
        )
        if user_data.get('birthdate'):
            order_text += f"üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {user_data['birthdate']}\n"
        if user_data.get('question'):
            order_text += f"‚ùì *–í–æ–ø—Ä–æ—Å:* {user_data['question']}\n"
        if user_data.get('situation'):
            order_text += f"üí´ *–°–∏—Ç—É–∞—Ü–∏—è:* {user_data['situation']}\n"
        if user_data.get('ref_from'):
            order_text += f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª –æ—Ç: {user_data['ref_from']}\n"
        order_text += f"\nüí¨ *–û—Ç–≤–µ—Ç–∏—Ç—å:* /reply {user.id} –≤–∞—à_—Ç–µ–∫—Å—Ç"
        await notify_admin(context, order_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

# ================== –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê (reply + —à–∞–±–ª–æ–Ω—ã + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ==================
async def reply_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <id_–∫–ª–∏–µ–Ω—Ç–∞> –í–∞—à –æ—Ç–≤–µ—Ç")
        return
    user_id = int(context.args[0])
    reply_text = ' '.join(context.args[1:])
    await context.bot.send_message(chat_id=user_id, text=f"üí´ *–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:*\n\n{reply_text}\n\n‚ú® –° –ª—é–±–æ–≤—å—é, –í–∞—à–∞ Lara", parse_mode='Markdown')
    await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!")
    # –ø—Ä–æ—Å—å–±–∞ –æ–± –æ—Ü–µ–Ω–∫–µ
    await ask_for_rating(context, user_id)

READY_ANSWERS: Dict[str, str] = {
    "ready":   "‚ú® –í–∞—à –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!\n–Ø –≤–ª–æ–∂–∏–ª–∞ –≤ –Ω–µ–≥–æ –º–∞–∫—Å–∏–º—É–º –≤–Ω–∏–º–∞–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏.\n–°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üåô",
    "inwork":  "üåô –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.\n‚è≥ –í —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —è –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä ‚ú®",
    "paid":    "üí´ –û–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∏–ª–∞, –±–ª–∞–≥–æ–¥–∞—Ä—é üôè\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n–°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç üîÆ",
    "done":    "üîî –í–∞—à —Ä–∞–∑–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\n–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –≤–∞–∂–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n‚ú® –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üåô",
    "thanks":  "üôè –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n–î–ª—è –º–µ–Ω—è —á–µ—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏ üå∏"
}

async def send_template(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args:
        await update.message.reply_text(f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /{key} <id_–∫–ª–∏–µ–Ω—Ç–∞>")
        return
    user_id = int(context.args[0])
    await context.bot.send_message(chat_id=user_id, text=READY_ANSWERS[key])
    await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
    await ask_for_rating(context, user_id)

async def cmd_ready(update: Update, context: ContextTypes.DEFAULT_TYPE):   await send_template(update, context, "ready")
async def cmd_inwork(update: Update, context: ContextTypes.DEFAULT_TYPE):  await send_template(update, context, "inwork")
async def cmd_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):    await send_template(update, context, "paid")
async def cmd_done(update: Update, context: ContextTypes.DEFAULT_TYPE):    await send_template(update, context, "done")
async def cmd_thanks(update: Update, context: ContextTypes.DEFAULT_TYPE):  await send_template(update, context, "thanks")

async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("all_orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        msgs = content.split("‚îÄ"*50)
        for msg in msgs[-5:]:
            if msg.strip():
                await update.message.reply_text(f"üìã {msg}", parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text("üìÅ –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    try:
        with open("all_orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        await update.message.reply_text("üìÅ –§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    total_msgs = len(re.findall(r"^üì©", content, flags=re.M))
    total_orders = len(re.findall(r"üåü \*–ù–û–í–´–ô –ó–ê–ö–ê–ó\*", content))
    payments = len(re.findall(r"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", content))
    report = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ: {total_msgs}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–ø–ª–∞—Ç—ã: {payments}\n"
    )
    await update.message.reply_text(report, parse_mode='Markdown')

# ================== –†–ï–§–ï–†–ê–õ–ö–ê ==================
async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    code = f"REF{user_id}"
    text = (
        "üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
        f"–î–∞–π—Ç–µ –ø–æ–¥—Ä—É–≥–µ –∫–æ–¥: `{code}` ‚Äî –∏ –æ–Ω–∞ –ø–æ–ª—É—á–∏—Ç *-{DISCOUNT_PERCENT}%* –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É.\n"
        "–ü—É—Å—Ç—å –Ω–∞—á–Ω—ë—Ç —Å–æ –º–Ω–æ–π –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç: `/start {code}`\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –º–µ–Ω—è üå∏"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

def parse_ref_code(arg: str) -> Optional[int]:
    m = re.fullmatch(r"REF(\d+)", arg.strip())
    return int(m.group(1)) if m else None

# ================== –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Ä–µ—Ñ-–∫–æ–¥: /start REF<id>
    ref_from = None
    if context.args:
        ref_from = parse_ref_code(context.args[0])
        if ref_from and ref_from != update.effective_user.id:
            context.user_data['ref_from'] = ref_from
            await notify_admin(context, f"üéÅ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç {ref_from} (–∫–ª–∏–µ–Ω—Ç: {update.effective_user.id})")

    await forward_all_messages(update, context)
    welcome = (
        "üåô *–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥–æ—Ä–æ–≥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç —Å –≤–∞—à–µ–π –¥—É—à–æ–π:\n"
    )
    await update.message.reply_text(welcome, reply_markup=services_keyboard(), parse_mode='Markdown')
    return SELECTING_SERVICE

def render_price_text(name: str, ref: bool) -> str:
    s = SERVICES[name]
    uah, eur = s['price_uah'], s['price_eur']
    if ref:
        du, de = get_discounted(uah), get_discounted(eur)
        return f"üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:* ~~{uah}~~ ‚Üí *{du}* –≥—Ä–Ω –∏–ª–∏ ~~{eur}~~ ‚Üí *{de}* ‚Ç¨ (—Å–∫–∏–¥–∫–∞ {DISCOUNT_PERCENT}%)\n\n–ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ?"
    return f"üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:* {uah} –≥—Ä–Ω –∏–ª–∏ {eur} ‚Ç¨\n\n–ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ?"

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    name = update.message.text
    if name not in SERVICES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üåô", reply_markup=services_keyboard())
        return SELECTING_SERVICE
    context.user_data['selected_service'] = name
    # –æ—á–∏—Å—Ç–∏–º —Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key in ("birthdate", "question", "situation"):
        context.user_data.pop(key, None)
    await update.message.reply_text(render_service_card(name), reply_markup=choice_price_keyboard(), parse_mode='Markdown')
    return AWAITING_PRICE_CHOICE

async def price_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    text = update.message.text
    if text == BTN_BACK:
        await update.message.reply_text("üåô –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_keyboard(), parse_mode='Markdown')
        return SELECTING_SERVICE
    if text != BTN_PRICE:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ¬´üíé –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª –∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª.", reply_markup=choice_price_keyboard())
        return AWAITING_PRICE_CHOICE
    name = context.user_data.get('selected_service')
    ref = bool(context.user_data.get('ref_from'))
    await update.message.reply_text(render_price_text(name, ref), reply_markup=choice_pay_keyboard(), parse_mode='Markdown')
    return AWAITING_PAY_CHOICE

# ---- –ê–≤—Ç–æ—Å–±–æ—Ä –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π (–ø.10)
def next_required_field(name: str, user_data: dict) -> Optional[str]:
    for field in SERVICES[name]["requires"]:
        if field not in user_data:
            return field
    return None

async def pay_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    text = update.message.text
    name = context.user_data.get('selected_service')
    if text == BTN_BACK:
        await update.message.reply_text(render_service_card(name), reply_markup=choice_price_keyboard(), parse_mode='Markdown')
        return AWAITING_PRICE_CHOICE
    if text != BTN_PAY:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ¬´üí≥ –û–ø–ª–∞—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª.", reply_markup=choice_pay_keyboard())
        return AWAITING_PAY_CHOICE

    # –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    missing = next_required_field(name, context.user_data)
    if missing == "birthdate":
        await update.message.reply_text(SERVICES[name]["ask_birthdate"], reply_markup=back_keyboard(), parse_mode='Markdown')
        return ENTERING_BIRTHDATE
    if missing == "question":
        await update.message.reply_text(SERVICES[name]["ask_question"], reply_markup=back_keyboard(), parse_mode='Markdown')
        return ENTERING_QUESTION
    if missing == "situation":
        await update.message.reply_text(SERVICES[name]["ask_situation"], reply_markup=back_keyboard(), parse_mode='Markdown')
        return ENTERING_SITUATION

    # –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await update.message.reply_text(PAYMENT_DETAILS, reply_markup=back_keyboard(), parse_mode='Markdown')
    return UPLOAD_PAYMENT

# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async def birthdate_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    if update.message.text == BTN_BACK:
        await update.message.reply_text(render_service_card(context.user_data['selected_service']), reply_markup=choice_price_keyboard(), parse_mode='Markdown')
        return AWAITING_PRICE_CHOICE
    if not is_valid_date(update.message.text):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*.", reply_markup=back_keyboard(), parse_mode='Markdown')
        return ENTERING_BIRTHDATE
    context.user_data['birthdate'] = update.message.text
    # –≤–µ—Ä–Ω—ë–º –Ω–∞ –æ–ø–ª–∞—Ç—É
    await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=choice_pay_keyboard(), parse_mode='Markdown')
    return AWAITING_PAY_CHOICE

async def question_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    if update.message.text == BTN_BACK:
        await update.message.reply_text(render_service_card(context.user_data['selected_service']), reply_markup=choice_price_keyboard(), parse_mode='Markdown')
        return AWAITING_PRICE_CHOICE
    context.user_data['question'] = update.message.text
    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=choice_pay_keyboard(), parse_mode='Markdown')
    return AWAITING_PAY_CHOICE

async def situation_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    if update.message.text == BTN_BACK:
        await update.message.reply_text(render_service_card(context.user_data['selected_service']), reply_markup=choice_price_keyboard(), parse_mode='Markdown')
        return AWAITING_PRICE_CHOICE
    context.user_data['situation'] = update.message.text
    await update.message.reply_text("‚úÖ –°–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=choice_pay_keyboard(), parse_mode='Markdown')
    return AWAITING_PAY_CHOICE

# ---- –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–ª–∞—Ç—ã
async def payment_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    if update.message.text == BTN_BACK:
        await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?", reply_markup=choice_pay_keyboard(), parse_mode='Markdown')
        return AWAITING_PAY_CHOICE
    if update.message.photo:
        service = context.user_data.get('selected_service', '‚Äî')
        user = update.message.from_user
        await forward_order_to_admin(context, context.user_data, user, service)
        completion_text = (
            f"‚ú® *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É \"{service}\" –ø—Ä–∏–Ω—è—Ç.\n\n"
            f"‚è≥ *–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞*\n\n"
            f"üí´ *–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...*"
        )
        await update.message.reply_text(completion_text, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå *–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.*", reply_markup=back_keyboard(), parse_mode='Markdown')
        return UPLOAD_PAYMENT

# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤/–æ—Ü–µ–Ω–æ–∫ (–ø.7)
async def rating_or_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    awaiting: Dict[int, datetime] = context.bot_data.get("await_rating", {})
    expire = awaiting.get(user_id)

    if not expire or datetime.now() > expire:
        # –Ω–µ –∂–¥—ë–º –æ—Ü–µ–Ω–∫—É ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—é
        return

    txt = update.message.text or ""
    rating_match = re.fullmatch(r"üíú\s([1-5])", txt)

    entry = f"üìù –û–¢–ó–´–í\nüë§ ID: {user_id}\n"
    if rating_match:
        stars = int(rating_match.group(1))
        entry += f"–û—Ü–µ–Ω–∫–∞: {stars}/5\n"
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É üíú")
    else:
        entry += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {txt}\n"
        await update.message.reply_text("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ üå∏")

    append_log("reviews.txt", entry)
    await notify_admin(context, entry)

    # –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ—Ü–µ–Ω–∫–∞ ‚Äî –æ—Å—Ç–∞–≤–∏–º –æ–∫–Ω–æ –µ—â—ë –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞; –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∑–∞–∫—Ä–æ–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    if rating_match:
        awaiting[user_id] = datetime.now() + timedelta(minutes=10)
    else:
        awaiting.pop(user_id, None)

# ================== –ü–†–û–ß–ï–ï ==================
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await forward_all_messages(update, context)
    await update.message.reply_text("üåô *–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.* /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    return ConversationHandler.END

async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("all_orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        msgs = content.split("‚îÄ"*50)
        for msg in msgs[-5:]:
            if msg.strip():
                await update.message.reply_text(f"üìã {msg}", parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text("üìÅ –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à ID: `{update.effective_user.id}`", parse_mode='Markdown')

async def ping_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîî –¢–µ—Å—Ç: –∞–¥–º–∏–Ω, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ —Ç–µ–±–µ?")

# ================== MAIN ==================
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_SERVICE: [
                MessageHandler(filters.Regex(f'^({"|".join(SERVICES.keys())})$'), service_selected)
            ],
            AWAITING_PRICE_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, price_choice)
            ],
            AWAITING_PAY_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, pay_choice)
            ],
            ENTERING_BIRTHDATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_received)
            ],
            ENTERING_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, question_received)
            ],
            ENTERING_SITUATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, situation_received)
            ],
            UPLOAD_PAYMENT: [
                MessageHandler(filters.PHOTO, payment_received),
                MessageHandler(filters.TEXT & ~filters.COMMAND, payment_received),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –°—Ü–µ–Ω–∞—Ä–∏–π
    application.add_handler(conv_handler)

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    application.add_handler(CommandHandler("reply", reply_to_client))
    application.add_handler(CommandHandler("ready",   cmd_ready))
    application.add_handler(CommandHandler("inwork",  cmd_inwork))
    application.add_handler(CommandHandler("paid",    cmd_paid))
    application.add_handler(CommandHandler("done",    cmd_done))
    application.add_handler(CommandHandler("thanks",  cmd_thanks))
    application.add_handler(CommandHandler("orders", show_orders))
    application.add_handler(CommandHandler("stats", stats))

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ
    application.add_handler(CommandHandler("promo", promo))
    application.add_handler(CommandHandler("myid", myid))
    application.add_handler(CommandHandler("ping_admin", ping_admin))

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Reply (–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É/–∫–æ–ø–∏—é)
    application.add_handler(MessageHandler(filters.Chat(ADMIN_CHAT_ID), admin_reply))

    # –õ–æ–≤–∏–º –æ—Ü–µ–Ω–∫–∏/–æ—Ç–∑—ã–≤—ã (–ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —Ñ–∏–¥–±—ç–∫–∞)
    application.add_handler(MessageHandler(filters.Regex(r'^üíú [1-5]$'), rating_or_feedback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, rating_or_feedback))

    # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Üí –∞–¥–º–∏–Ω—É
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, forward_all_messages))

    print("üåô –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ -10%, –∞–≤—Ç–æ—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–∑—ã–≤—ã/–æ—Ü–µ–Ω–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã.")
    application.run_polling()

if __name__ == '__main__':
    main()
